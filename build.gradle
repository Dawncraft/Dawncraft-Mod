buildscript {
    repositories {
        maven { url = "https://maven.aliyun.com/repository/public" }
        maven { url = "https://crystal.app.lss233.com/repositories/minecraft" }
        // jcenter()
        maven { url = "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'

version = mod_version
group = mod_group
archivesBaseName = mod_id + "-" + minecraft_version

sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}
[compileJava, compileTestJava, javadoc]*.options*.encoding = 'UTF-8'

minecraft {
    version = minecraft_version + "-" + forge_version
    mappings = mcp_mapping
    runDir = run_dir
    // assetDir = run_dir + "/assets"
    clientRunArgs += run_args
    makeObfSourceJar = false
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    // compile fileTree(dir: 'libs', include: '*.jar')
    shade files('libs/luaj-jse-3.0.1.jar', 
                'libs/markdown4j-2.2.jar',
                'libs/bliki-core-3.1.0.jar')
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
    
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

reobf {
    jar {
        // addExtraSrgLines []
        // addExtraSrgLine 'PK: org/luaj io/github/dawncraft/repack/org/luaj'
        // addExtraSrgLine 'PK: org/markdown4j io/github/dawncraft/repack/org/markdown4j'
        // addExtraSrgLine 'PK: com/github/rjeschke/txtmark io/github/dawncraft/repack/com/github/rjeschke/txtmark'
    }

    coreJar {}
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }

    from sourceSets.main.output
        exclude 'io/github/dawncraft/core/**'

    manifest {
        attributes 'FMLAT': 'dawncraft_at.cfg'
    }
}

task coreJar(type: Jar) {
    from sourceSets.main.output
        include 'io/github/dawncraft/core/**'

    manifest {
        attributes 'FMLCorePlugin': 'io.github.dawncraft.core.DawnCorePlugin'
    }

    classifier = 'core'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
        include 'io/github/dawncraft/**'
        include 'assets/**'

    manifest {
        attributes 'FMLCorePlugin': 'io.github.dawncraft.core.DawnCorePlugin'
    }

    classifier = 'dev'
}

task apiJar(type: Jar) {
    from sourceSets.main.output
        include 'io/github/dawncraft/api/**'

    classifier = 'api'
}

task apiSourceJar(type: Jar) {
    from sourceSets.main.allSource
        include 'io/github/dawncraft/api/**'

    classifier = 'api-source'
}

artifacts {
    archives coreJar
    archives deobfJar
    archives sourceJar
    archives apiJar
    archives apiSourceJar
}
